# Boost exception_ptr uses atomics not recognised by tsan
race:boost/exception/detail/exception_ptr.hpp
race:boost/exception/exception.hpp
race:void std::swap<boost::exception_detail::clone_base const*>

# Boost shared_ptr uses atomics not recognised by tsan
race:boost/smart_ptr/detail/shared_count.hpp

# Known false positives in libstdc++
race:include/c++/*/bits/shared_ptr_base.h
race:include/c++/*/bits/shared_ptr.h



# 2014-03-24 ned
# Benign write by two threads to same memory without lock
# Caused by test framework reusing same encryption key for two threads instead of making copy
# /home/ned/MaidSafe/src/rudp/src/maidsafe/rudp/tests/test_utils.cc:303 
#####race:maidsafe::rudp::test::Node::Bootstrap(std::vector<boost::asio::ip::basic_endpoint<boost::asio::ip::udp>, std::allocator<boost::asio::ip::basic_endpoint<boost::asio::ip::udp> > > const&, maidsafe::NodeId&, boost::asio::ip::basic_endpoint<boost::asio::ip::udp>)

